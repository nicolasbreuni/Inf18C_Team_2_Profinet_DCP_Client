[
    {
        "id": "9628fea8.725b7",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "5fbfdca5.1656b4",
        "type": "exec",
        "z": "9628fea8.725b7",
        "command": "nmap --script C:\\Profinet-backend\\pn_discovery.nse",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 430,
        "y": 200,
        "wires": [
            [
                "80236c4a.280c8"
            ],
            [],
            []
        ]
    },
    {
        "id": "80236c4a.280c8",
        "type": "function",
        "z": "9628fea8.725b7",
        "name": "NMAP Parser",
        "func": "// Hex Buffer to String\nvar raw = Buffer.from(msg.payload);\n\n// slice listed devices\nvar devString = raw.slice(raw.indexOf('devices:') + 8, raw.indexOf('Nmap done: '));\n\n\nfunction ab2str(buf) {\n    node.warn(String.fromCharCode.apply(null, new Uint16Array(buf)))\n  return String.fromCharCode.apply(null, new Uint16Array(buf));\n}\n\ndevString = ab2str(devString);\nnode.warn(devString);\n\n//recursive parsing of device String\nvar devArray = parse(devString, []);\n\nfunction parse(devString, result) {\n    if(devString.length < 10) {\n        // do noting or leave\n        return result;\n    } else {\n        \n       // parse one device out of the string\n       \n       devString = devString.slice(devString.indexOf('ip_addr: ') + 9);\n       let ip = devString.slice(0, devString.indexOf('\\r'));\n       devString = devString.slice(devString.indexOf('|'));\n       \n       devString = devString.slice(devString.indexOf('mac_addr: ') + 10);\n       let mac = devString.slice(0, devString.indexOf('\\r'));\n       devString = devString.slice(devString.indexOf('|'));\n       \n       devString = devString.slice(devString.indexOf('subnetmask: ') + 12);\n       let subnet = devString.slice(0, devString.indexOf('\\r'));\n       devString = devString.slice(devString.indexOf('|'));\n       \n       devString = devString.slice(devString.indexOf('vendorId: ') + 10);\n       let vendorId = devString.slice(0, devString.indexOf('\\r'));\n       devString = devString.slice(devString.indexOf('|'));\n       \n       devString = devString.slice(devString.indexOf('deviceId: ') + 10);\n       let deviceId = devString.slice(0, devString.indexOf('\\r'));\n       devString = devString.slice(devString.indexOf('|'));\n       \n       devString = devString.slice(devString.indexOf('vendorvalue: ') + 13);\n       let vendorvalue = devString.slice(0, devString.indexOf('\\r'));\n       devString = devString.slice(devString.indexOf('|'));\n       \n       devString = devString.slice(devString.indexOf('deviceRole: ') + 12);\n       let deviceRole = devString.slice(0, devString.indexOf('\\r'));\n       devString = devString.slice(devString.indexOf('|'));\n       \n       devString = devString.slice(devString.indexOf('nameOfStation: ') + 15);\n       let nameOfStation;\n       if(devString.includes('|')) {\n        nameOfStation = devString.slice(0, devString.indexOf('\\r'));\n        devString = devString.slice(devString.indexOf('|'));\n       } else {\n        nameOfStation = devString.slice(0, devString.indexOf('\\r'));\n        devString = ' ';\n       }\n       \n       result.push({\n           ip_addr: ip,\n           mac_addr: mac,\n           subnetmask: subnet,\n           vendorId: vendorId,\n           deviceId: deviceId,\n           vendorValue: vendorvalue,\n           deviceRole: deviceRole,\n           nameOfStation: nameOfStation\n       })\n       \n    }\n    return parse(devString, result);\n}\n\nflow.set('devArray',devArray);\nmsg.payload = 'Found ' + devArray.length + ' Profinet Devices!'\nnode.warn('Found ' + devArray.length + ' Profinet Devices!');\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 760,
        "y": 200,
        "wires": [
            [
                "c389fcb2.06374"
            ]
        ]
    },
    {
        "id": "32015e26.8b9e72",
        "type": "http in",
        "z": "9628fea8.725b7",
        "name": "refresh",
        "url": "/profinet-dcp/devices/refresh",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 200,
        "wires": [
            [
                "5fbfdca5.1656b4"
            ]
        ]
    },
    {
        "id": "c389fcb2.06374",
        "type": "http response",
        "z": "9628fea8.725b7",
        "name": "ok",
        "statusCode": "200",
        "headers": {},
        "x": 970,
        "y": 200,
        "wires": []
    },
    {
        "id": "b8409f22.840ec",
        "type": "function",
        "z": "9628fea8.725b7",
        "name": "overview generator",
        "func": "msg.payload = flow.get('devArray') || 0;\n\nif(msg.payload === 0) {\n    msg.payload = \"Need to refresh!\"\n    return [null, msg]\n} else {\n    var overview = [];\n    msg.payload.forEach((device)=>{\n        overview.push({\n            ip_addr: device.ip_addr,\n            nameOfStation: device.nameOfStation\n            })\n    });\n    msg.payload = overview\n}\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "x": 650,
        "y": 320,
        "wires": [
            [
                "b98e75ef.e90738"
            ],
            [
                "db494e08.422a"
            ]
        ]
    },
    {
        "id": "19d73173.bc372f",
        "type": "http in",
        "z": "9628fea8.725b7",
        "name": "",
        "url": "/profinet-dcp/devices",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "678b1ac6.b6a644"
            ]
        ]
    },
    {
        "id": "db494e08.422a",
        "type": "http response",
        "z": "9628fea8.725b7",
        "name": "error",
        "statusCode": "500",
        "headers": {},
        "x": 850,
        "y": 380,
        "wires": []
    },
    {
        "id": "b98e75ef.e90738",
        "type": "http response",
        "z": "9628fea8.725b7",
        "name": "ok",
        "statusCode": "200",
        "headers": {},
        "x": 850,
        "y": 340,
        "wires": []
    },
    {
        "id": "2df6a776.229c58",
        "type": "function",
        "z": "9628fea8.725b7",
        "name": "detail view generator",
        "func": "var ip = msg.payload.ip;\nmsg.payload = flow.get('devArray') || 0;\nif(msg.payload === 0) {\n    msg.payload = \"Need to refresh!\"\n    return [null, null, msg]\n} else {\n    var result = 0;\n    msg.payload.forEach((device) => {\n        node.warn(device.ip_addr + \" vs \" + ip);\n        \n        if(contains(device.ip_addr, ip)){\n            result = device;\n        }\n    })\n    if (result === 0) {\n        msg.payload = \"Device with IP: \" + ip + \" not found!\"\n        return [null, msg, null];\n    }\n    msg.payload = result;\n}\n\nfunction contains(value, searchFor)\n{\n\treturn (value || '').indexOf(searchFor) > -1;\n}\n\nreturn [msg, null, null];",
        "outputs": 3,
        "noerr": 0,
        "x": 640,
        "y": 460,
        "wires": [
            [
                "400524f7.e87bac"
            ],
            [
                "cdbed0fa.c7ab2"
            ],
            [
                "c06e022d.0efc5"
            ]
        ]
    },
    {
        "id": "c06e022d.0efc5",
        "type": "http response",
        "z": "9628fea8.725b7",
        "name": "error",
        "statusCode": "500",
        "headers": {},
        "x": 870,
        "y": 560,
        "wires": []
    },
    {
        "id": "400524f7.e87bac",
        "type": "http response",
        "z": "9628fea8.725b7",
        "name": "ok",
        "statusCode": "200",
        "headers": {},
        "x": 870,
        "y": 480,
        "wires": []
    },
    {
        "id": "678b1ac6.b6a644",
        "type": "function",
        "z": "9628fea8.725b7",
        "name": "query check",
        "func": "node.warn(msg.payload);\nif(msg.payload.ip !== undefined){\n    // Requester wants overview\n    return [null, msg]\n} else {\n    //Requester wants detail view for a specific ip\n    return [msg, null]\n}",
        "outputs": 2,
        "noerr": 0,
        "x": 370,
        "y": 320,
        "wires": [
            [
                "b8409f22.840ec"
            ],
            [
                "2df6a776.229c58"
            ]
        ]
    },
    {
        "id": "cdbed0fa.c7ab2",
        "type": "http response",
        "z": "9628fea8.725b7",
        "name": "not found",
        "statusCode": "404",
        "headers": {},
        "x": 890,
        "y": 520,
        "wires": []
    },
    {
        "id": "7617ce4a.d3f0e",
        "type": "http in",
        "z": "9628fea8.725b7",
        "name": "",
        "url": "/profinet-dcp/devices",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 600,
        "wires": [
            [
                "5e382f1f.3c995"
            ]
        ]
    },
    {
        "id": "5e382f1f.3c995",
        "type": "function",
        "z": "9628fea8.725b7",
        "name": "prep request",
        "func": "msg.url = 'http://' + msg.req.query.ip + '/config.htm';\nmsg.headers = msg.req.headers\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 640,
        "wires": [
            [
                "3b56cd1c.f76d92"
            ]
        ]
    },
    {
        "id": "3b56cd1c.f76d92",
        "type": "http request",
        "z": "9628fea8.725b7",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 590,
        "y": 660,
        "wires": [
            [
                "3224d337.1daf2c"
            ]
        ]
    },
    {
        "id": "3224d337.1daf2c",
        "type": "http response",
        "z": "9628fea8.725b7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 680,
        "wires": []
    }
]